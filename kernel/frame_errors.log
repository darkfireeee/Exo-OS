warning: profiles for the non root package will be ignored, specify profiles at the workspace root:
package:   C:\Users\Eric\Documents\Exo-OS\kernel\Cargo.toml
workspace: C:\Users\Eric\Documents\Exo-OS\Cargo.toml
warning: virtual workspace defaulting to `resolver = "1"` despite one or more workspace members being on edition 2021 which implies `resolver = "2"`
note: to keep the current resolver, specify `workspace.resolver = "1"` in the workspace root's manifest
note: to use the edition 2021 resolver, specify `workspace.resolver = "2"` in the workspace root's manifest
note: for more details see https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions
    Checking exo-kernel v0.1.0 (C:\Users\Eric\Documents\Exo-OS\kernel)
warning: unexpected `cfg` condition value: `debug`
   --> kernel\src\libutils\arch\x86_64\interrupts.rs:127:15
    |
127 |         #[cfg(feature = "debug")]
    |               ^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `binary`, `capnp`, `crypto`, `default`, `ed25519-dalek`, `serialization`, and `sha3`
    = help: consider adding `debug` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unused import: `Ordering`
 --> kernel\src\libutils\macros\lazy_static.rs:6:38
  |
6 | use core::sync::atomic::{AtomicBool, Ordering};
  |                                      ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` (part of `#[warn(unused)]`) on by default

warning: unused import: `core::ops::Deref`
 --> kernel\src\libutils\macros\lazy_static.rs:9:5
  |
9 | use core::ops::Deref;
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `FrameAllocator`, `Mapper`, and `PhysAddr`
 --> kernel\src\memory\page_table.rs:7:9
  |
7 |         FrameAllocator, Mapper, OffsetPageTable, Page, PageTable, PageTableFlags, PhysFrame, Size4KiB,
  |         ^^^^^^^^^^^^^^  ^^^^^^
8 |     },
9 |     PhysAddr, VirtAddr,
  |     ^^^^^^^^

warning: unused import: `core::ptr::NonNull`
 --> kernel\src\memory\heap_allocator.rs:6:5
  |
6 | use core::ptr::NonNull;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `PageTableFlags`, `Page`, `Size4KiB`, and `VirtAddr`
  --> kernel\src\memory\mod.rs:13:9
   |
13 |         Page, PageTableFlags, Size4KiB,
   |         ^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^
14 |     },
15 |     VirtAddr,
   |     ^^^^^^^^

warning: unused doc comment
  --> kernel\src\scheduler\mod.rs:33:1
   |
33 | /// Ordonnanceur global, initialis├⌐ au d├⌐marrage.
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macro invocations
   |
   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion
   = note: `#[warn(unused_doc_comments)]` (part of `#[warn(unused)]`) on by default

warning: unused doc comment
   --> kernel\src\scheduler\scheduler.rs:159:1
    |
159 |   /// Fonction externe d├⌐finie dans `context_switch.S`.
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
160 | / extern "C" {
161 | |     fn context_switch(old_context: *mut ThreadContext, new_rsp: u64);
162 | | }
    | |_- rustdoc does not generate documentation for extern blocks
    |
    = help: use `//` for a plain comment

warning: unused import: `ThreadState`
  --> kernel\src\scheduler\mod.rs:26:32
   |
26 | use thread::{Thread, ThreadId, ThreadState};
   |                                ^^^^^^^^^^^

warning: unused import: `core::arch::asm`
 --> kernel\src\syscall\mod.rs:7:5
  |
7 | use core::arch::asm;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `crate::memory`
  --> kernel\src\syscall\dispatch.rs:10:5
   |
10 | use crate::memory;
   |     ^^^^^^^^^^^^^

warning: unused import: `crate::drivers::block`
  --> kernel\src\syscall\dispatch.rs:12:5
   |
12 | use crate::drivers::block;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused doc comment
   --> kernel\src\perf_counters.rs:235:1
    |
235 | /// Instance globale du gestionnaire de performance
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macro invocations
    |
    = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion

warning: unused import: `print`
 --> kernel\src\perf_counters.rs:8:22
  |
8 | use crate::{println, print};
  |                      ^^^^^

warning: unused import: `core::ptr::NonNull`
   --> kernel\src\lib.rs:131:25
    |
131 |                     use core::ptr::NonNull;
    |                         ^^^^^^^^^^^^^^^^^^

warning: use of deprecated function `x86_64::instructions::segmentation::set_cs`: use `CS::set_reg()` instead
  --> kernel\src\arch\x86_64\gdt.rs:47:9
   |
47 |         set_cs(GDT.1.code_selector);
   |         ^^^^^^
   |
   = note: `#[warn(deprecated)]` on by default

warning: use of deprecated function `x86_64::instructions::segmentation::load_ds`: use `DS::set_reg()` instead
  --> kernel\src\arch\x86_64\gdt.rs:48:9
   |
48 |         load_ds(GDT.1.data_selector);
   |         ^^^^^^^

warning: use of deprecated function `x86_64::instructions::segmentation::set_cs`: use `CS::set_reg()` instead
  --> kernel\src\arch\x86_64\gdt.rs:42:46
   |
42 |     use x86_64::instructions::segmentation::{set_cs, load_ds};
   |                                              ^^^^^^

warning: use of deprecated function `x86_64::instructions::segmentation::load_ds`: use `DS::set_reg()` instead
  --> kernel\src\arch\x86_64\gdt.rs:42:54
   |
42 |     use x86_64::instructions::segmentation::{set_cs, load_ds};
   |                                                      ^^^^^^^

warning: use of deprecated function `core::sync::atomic::spin_loop_hint`: use hint::spin_loop instead
 --> kernel\src\libutils\sync\mutex.rs:8:48
  |
8 | use core::sync::atomic::{AtomicBool, Ordering, spin_loop_hint};
  |                                                ^^^^^^^^^^^^^^

warning: use of deprecated function `core::sync::atomic::spin_loop_hint`: use hint::spin_loop instead
  --> kernel\src\libutils\sync\mutex.rs:51:13
   |
51 |             spin_loop_hint();
   |             ^^^^^^^^^^^^^^

error[E0204]: the trait `core::marker::Copy` cannot be implemented for this type
   --> kernel\src\libutils\ffi\va_list.rs:177:19
    |
 12 |     inner: VaListImpl<'a>,
    |     --------------------- this field does not implement `core::marker::Copy`
...
177 | impl<'a> Copy for VaList<'a> {}
    |                   ^^^^^^^^^^

error[E0308]: mismatched types
   --> kernel\src\memory\frame_allocator.rs:137:21
    |
126 | /                 if self.next_free.compare_exchange(
127 | |                     current_next,
128 | |                     next_candidate,
129 | |                     Ordering::SeqCst,
...   |
137 | |                     Some(PhysFrame::from_start_address(PhysAddr::new(phys_addr as u64)).unwrap())
    | |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Option<PhysFrame<_>>`
138 | |                 }
    | |_________________- expected this to be `()`
    |
    = note: expected unit type `()`
                    found enum `Option<PhysFrame<_>>`
help: consider using a semicolon here
    |
137 |                     Some(PhysFrame::from_start_address(PhysAddr::new(phys_addr as u64)).unwrap());
    |                                                                                                  +
help: consider using a semicolon here
    |
138 |                 };
    |                  +
help: you might have meant to return this value
    |
137 |                     return Some(PhysFrame::from_start_address(PhysAddr::new(phys_addr as u64)).unwrap());
    |                     ++++++                                                                              +

error[E0599]: no method named `count` found for reference `&[MemoryArea]` in the current scope
  --> kernel\src\memory\mod.rs:32:48
   |
32 |                  memory_map_tag.memory_areas().count());
   |                                                ^^^^^
   |                                                |
   |                                                method cannot be called on `&[MemoryArea]` due to unsatisfied trait bounds
   |                                                help: consider using `len` instead
   |
   = note: `count` is defined on `Iterator`, which `&[MemoryArea]` does not implement

error[E0599]: no method named `find` found for reference `&[MemoryArea]` in the current scope
  --> kernel\src\memory\mod.rs:50:14
   |
49 |           if let Some(first_usable) = memory_map_tag.memory_areas()
   |  _____________________________________-
50 | |             .find(|area| area.typ() == multiboot2::MemoryAreaType::Available) {
   | |             -^^^^ method not found in `&[MemoryArea]`
   | |_____________|
   |

error[E0282]: type annotations needed
  --> kernel\src\memory\mod.rs:50:20
   |
50 |             .find(|area| area.typ() == multiboot2::MemoryAreaType::Available) {
   |                    ^^^^       --- type must be known at this point
   |
help: consider giving this closure parameter an explicit type
   |
50 |             .find(|area: /* Type */| area.typ() == multiboot2::MemoryAreaType::Available) {
   |                        ++++++++++++

error[E0282]: type annotations needed
  --> kernel\src\memory\mod.rs:52:38
   |
52 |             let start = first_usable.start_address() as usize;
   |                                      ^^^^^^^^^^^^^ cannot infer type

warning: unnecessary `unsafe` block
  --> kernel\src\arch\x86_64\interrupts.rs:24:5
   |
24 |     unsafe {
   |     ^^^^^^ unnecessary `unsafe` block
   |
   = note: `#[warn(unused_unsafe)]` (part of `#[warn(unused)]`) on by default

warning: unused variable: `cores`
  --> kernel\src\arch\x86_64\mod.rs:23:13
   |
23 | pub fn init(cores: usize) {
   |             ^^^^^
   |
   = note: `#[warn(unused_variables)]` (part of `#[warn(unused)]`) on by default
help: if this is intentional, prefix it with an underscore
   |
23 | pub fn init(_cores: usize) {
   |             +
help: you might have meant to pattern match on the similarly named constant `FAST_MESSAGE_SIZE`
   |
23 - pub fn init(cores: usize) {
23 + pub fn init(ipc::message::FAST_MESSAGE_SIZE: usize) {
   |

warning: unused variable: `index`
   --> kernel\src\libutils\arch\x86_64\interrupts.rs:126:41
    |
126 |     fn print_unhandled_interrupt(&self, index: u8, context: &InterruptContext) {
    |                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`

warning: unused variable: `context`
   --> kernel\src\libutils\arch\x86_64\interrupts.rs:126:52
    |
126 |     fn print_unhandled_interrupt(&self, index: u8, context: &InterruptContext) {
    |                                                    ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unnecessary `unsafe` block
  --> kernel\src\libutils\macros\println.rs:50:17
   |
50 |                 unsafe {
   |                 ^^^^^^ unnecessary `unsafe` block

warning: unused variable: `page`
  --> kernel\src\memory\page_table.rs:45:29
   |
45 |     pub fn get_flags(&self, page: Page<Size4KiB>) -> Result<PageTableFlags, &'static str> {
   |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_page`

warning: unused variable: `buf_ptr`
  --> kernel\src\syscall\dispatch.rs:25:9
   |
25 |     let buf_ptr = args.rsi as *mut u8;
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_buf_ptr`

warning: unused variable: `path_ptr`
   --> kernel\src\syscall\dispatch.rs:118:9
    |
118 |     let path_ptr = args.rdi as *const u8;
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_path_ptr`

warning: unused variable: `flags`
   --> kernel\src\syscall\dispatch.rs:119:9
    |
119 |     let flags = args.rsi;
    |         ^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
119 |     let _flags = args.rsi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
119 -     let flags = args.rsi;
119 +     let drivers::block::SECTOR_SIZE = args.rsi;
    |

warning: unused variable: `mode`
   --> kernel\src\syscall\dispatch.rs:120:9
    |
120 |     let mode = args.rdx;
    |         ^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
120 |     let _mode = args.rdx;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
120 -     let mode = args.rdx;
120 +     let drivers::block::SECTOR_SIZE = args.rdx;
    |

warning: unused variable: `fd`
   --> kernel\src\syscall\dispatch.rs:135:9
    |
135 |     let fd = args.rdi;
    |         ^^
    |
help: if this is intentional, prefix it with an underscore
    |
135 |     let _fd = args.rdi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
135 -     let fd = args.rdi;
135 +     let drivers::block::SECTOR_SIZE = args.rdi;
    |

warning: unused variable: `exit_code`
   --> kernel\src\syscall\dispatch.rs:150:9
    |
150 |     let exit_code = args.rdi;
    |         ^^^^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
150 |     let _exit_code = args.rdi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
150 -     let exit_code = args.rdi;
150 +     let drivers::block::SECTOR_SIZE = args.rdi;
    |

warning: unused variable: `ms`
   --> kernel\src\syscall\dispatch.rs:182:9
    |
182 |     let ms = args.rdi;
    |         ^^
    |
help: if this is intentional, prefix it with an underscore
    |
182 |     let _ms = args.rdi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
182 -     let ms = args.rdi;
182 +     let drivers::block::SECTOR_SIZE = args.rdi;
    |

warning: unused variable: `addr`
   --> kernel\src\syscall\dispatch.rs:202:9
    |
202 |     let addr = args.rdi;
    |         ^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
202 |     let _addr = args.rdi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
202 -     let addr = args.rdi;
202 +     let drivers::block::SECTOR_SIZE = args.rdi;
    |

warning: unused variable: `length`
   --> kernel\src\syscall\dispatch.rs:203:9
    |
203 |     let length = args.rsi;
    |         ^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
203 |     let _length = args.rsi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
203 -     let length = args.rsi;
203 +     let drivers::block::SECTOR_SIZE = args.rsi;
    |

warning: unused variable: `prot`
   --> kernel\src\syscall\dispatch.rs:204:9
    |
204 |     let prot = args.rdx;
    |         ^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
204 |     let _prot = args.rdx;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
204 -     let prot = args.rdx;
204 +     let drivers::block::SECTOR_SIZE = args.rdx;
    |

warning: unused variable: `flags`
   --> kernel\src\syscall\dispatch.rs:205:9
    |
205 |     let flags = args.r10;
    |         ^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
205 |     let _flags = args.r10;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
205 -     let flags = args.r10;
205 +     let drivers::block::SECTOR_SIZE = args.r10;
    |

warning: unused variable: `fd`
   --> kernel\src\syscall\dispatch.rs:206:9
    |
206 |     let fd = args.r8;
    |         ^^
    |
help: if this is intentional, prefix it with an underscore
    |
206 |     let _fd = args.r8;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
206 -     let fd = args.r8;
206 +     let drivers::block::SECTOR_SIZE = args.r8;
    |

warning: unused variable: `offset`
   --> kernel\src\syscall\dispatch.rs:207:9
    |
207 |     let offset = args.r9;
    |         ^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
207 |     let _offset = args.r9;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
207 -     let offset = args.r9;
207 +     let drivers::block::SECTOR_SIZE = args.r9;
    |

warning: unused variable: `addr`
   --> kernel\src\syscall\dispatch.rs:223:9
    |
223 |     let addr = args.rdi;
    |         ^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
223 |     let _addr = args.rdi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
223 -     let addr = args.rdi;
223 +     let drivers::block::SECTOR_SIZE = args.rdi;
    |

warning: unused variable: `length`
   --> kernel\src\syscall\dispatch.rs:224:9
    |
224 |     let length = args.rsi;
    |         ^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
224 |     let _length = args.rsi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
224 -     let length = args.rsi;
224 +     let drivers::block::SECTOR_SIZE = args.rsi;
    |

warning: unused variable: `flags`
   --> kernel\src\syscall\dispatch.rs:242:9
    |
242 |     let flags = args.rdi;
    |         ^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
242 |     let _flags = args.rdi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
242 -     let flags = args.rdi;
242 +     let drivers::block::SECTOR_SIZE = args.rdi;
    |

warning: unused variable: `stack_ptr`
   --> kernel\src\syscall\dispatch.rs:243:9
    |
243 |     let stack_ptr = args.rsi;
    |         ^^^^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
243 |     let _stack_ptr = args.rsi;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
243 -     let stack_ptr = args.rsi;
243 +     let drivers::block::SECTOR_SIZE = args.rsi;
    |

warning: unused variable: `tls_ptr`
   --> kernel\src\syscall\dispatch.rs:244:9
    |
244 |     let tls_ptr = args.rdx;
    |         ^^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
244 |     let _tls_ptr = args.rdx;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
244 -     let tls_ptr = args.rdx;
244 +     let drivers::block::SECTOR_SIZE = args.rdx;
    |

warning: unused variable: `regs_ptr`
   --> kernel\src\syscall\dispatch.rs:245:9
    |
245 |     let regs_ptr = args.r10;
    |         ^^^^^^^^
    |
help: if this is intentional, prefix it with an underscore
    |
245 |     let _regs_ptr = args.r10;
    |         +
help: you might have meant to pattern match on the similarly named constant `SECTOR_SIZE`
    |
245 -     let regs_ptr = args.r10;
245 +     let drivers::block::SECTOR_SIZE = args.r10;
    |

warning: unused variable: `data`
   --> kernel\src\drivers\block\mod.rs:191:57
    |
191 |     fn read_sectors(&mut self, sector: u64, count: u64, data: *mut u8) -> Result<(), BlockError> {
    |                                                         ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `data`
   --> kernel\src\drivers\block\mod.rs:210:58
    |
210 |     fn write_sectors(&mut self, sector: u64, count: u64, data: *const u8) -> Result<(), BlockError> {
    |                                                          ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `driver`
   --> kernel\src\drivers\block\mod.rs:335:13
    |
335 |     for (_, driver) in block_drivers {
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_driver`

warning: unnecessary `unsafe` block
  --> kernel\src\drivers\serial.rs:18:9
   |
18 |         unsafe {
   |         ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> kernel\src\drivers\serial.rs:30:9
   |
30 |         unsafe { read_port_u8(self.port + 5) & 0x20 != 0 }
   |         ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> kernel\src\drivers\serial.rs:35:9
   |
35 |         unsafe {
   |         ^^^^^^ unnecessary `unsafe` block

Some errors have detailed explanations: E0204, E0282, E0308, E0599.
For more information about an error, try `rustc --explain E0204`.
warning: `exo-kernel` (lib) generated 52 warnings
error: could not compile `exo-kernel` (lib) due to 6 previous errors; 52 warnings emitted
